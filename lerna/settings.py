"""
Django settings for lerna project.
Generated by 'django-admin startproject' using Django 1.8.2.
"""

import contextlib

from .base_settings import *


# Local settings, must be overridden in local_settings.py

SECRET_KEY = ""

DEBUG = False

DATABASES = {
    'default': {
        'ENGINE': "",
        'NAME': "",
        'USER': "",
        'PASSWORD': "",
        'HOST': "",
        'PORT': 0,
    }
}

# Non-local settings

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ajax_select',
    'pipeline',
    'scripts',
    'core',
    'users',
    'news',
    'contests',
    'global_statistics',
    'dbtrash',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'lerna.urls'

TEMPLATES = (
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': (
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ),
        },
    },
)

WSGI_APPLICATION = 'lerna.wsgi.application'

# Internationalization

LANGUAGE_CODE = 'ru-RU'

# TODO(viers): Do something with TZ, at least it must be moved to local settings
TIME_ZONE = 'Asia/Novosibirsk'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)

# TODO(viers): Think about moving this in another file - this section could grow quite large
STATIC_ROOT = os.path.join(BASE_DIR, 'static/piped')

# FORCE_MINIFICATION could be overwritten in local settings

FORCE_MINIFICATION = False

STATIC_URL = '/static/'

STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/src'),
)

AJAX_SELECT_BOOTSTRAP = False

DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL': '/static/jquery/jquery.min.js',
}

PIPELINE = {
    'JAVASCRIPT': {
        'jquery': {
            'source_filenames': (
              'jquery/jquery.min.js',
              'jquery/jquery-ui.min.js',
            ),
            'output_filename': 'jquery.piped.min.js',
        },
        'foundation': {
            'source_filenames': (
                'foundation/foundation.js',
                'foundation/what-input.js',
            ),
            'output_filename': 'foundation.piped.min.js',
        }
    },
    'STYLESHEETS': {
        'jquery': {
            'source_filenames': (
              'jquery-ui.min.css',
            ),
            'output_filename': 'jquery.piped.min.css',
        },
        'foundation': {
            'source_filenames': (
                'foundation/foundation.css',
            ),
            'output_filename': 'foundation.piped.min.css',
        }
    },
}

# Authorizing

AUTH_USER_MODEL = 'users.User'

TESTER = {
    'INVOKER': "",
    'EJUDGE_EXECUTE': "",
    'INVOCATION_DIRECTORY': "",
    'PROBLEM_DIRECTORY': "",
    'CHECKER_DIRECTORY': "",
}


# Applying local settings

from .local_settings import *

with contextlib.suppress(NameError):
    for key, value in PREPEND.items():
        globals()[key] = value + globals()[key]

with contextlib.suppress(NameError):
    for key, value in APPEND.items():
        globals()[key] += value


# Minification settings should be defined after DEBUG received it's final value

PIPELINE['PIPELINE_ENABLED'] = not DEBUG or FORCE_MINIFICATION
