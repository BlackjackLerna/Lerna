# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-29 03:04
from __future__ import unicode_literals

from   concurrent.futures import ThreadPoolExecutor
import os

from django.core import validators as val
from django.db   import migrations as mig, models as md

from misc import pandoc


def populate_html_fields(apps, schema_editor):
    Problem       = apps.get_model('core', 'Problem')
    Clarification = apps.get_model('core', 'Clarification')
    Notification  = apps.get_model('core', 'Notification')
    db = schema_editor.connection.alias

    def convert(values):
        return values[0], pandoc.convert(values[1], 'textile', to='html')

    with ThreadPoolExecutor(os.cpu_count() or 1) as e:
        notifications = list(
            Notification
            .objects
            .using(db)
            .values_list('id', 'description')
        )
        notifications = e.map(convert, notifications, chunksize=5)
        clarifications = list(
            Clarification
            .objects
            .using(db)
            .values_list('id', 'answer')
        )
        clarifications = e.map(convert, clarifications, chunksize=20)
        Problem.objects.using(db).update(
            description_html=md.F('description'),
            input_specification_html=md.F('input_specification'),
            output_specification_html=md.F('output_specification'),
            samples_html=md.F('samples'),
            explanations_html=md.F('explanations'),
            notes_html=md.F('notes'),
            analysis_html=md.F('analysis'),
        )
        for id, html in notifications:
            Notification.objects.using(db).filter(id=id).update(description_html=html)
        for id, html in clarifications:
            Clarification.objects.using(db).filter(id=id).update(answer_html=html)


class Migration(mig.Migration):
    dependencies = [
        ('core', '0010_unfreeze_contests'),
    ]

    operations = [
        # Problem.
        mig.AddField(
            model_name='problem',
            name='statements_format',
            field=md.CharField(
                max_length=255,
                default=','.join(['html'] * 7),
                validators=[val.RegexValidator(r'^([^\s,]+,){6}[^\s,]+$')],
            ),
            preserve_default=False,
        ),
        mig.AlterField(
            model_name='problem',
            name='statements_format',
            field=md.CharField(
                max_length=255,
                default='latex,latex,latex,textile,latex,latex,latex',
                validators=[val.RegexValidator(r'^([^\s,]+,){6}[^\s,]+$')],
            ),
        ),
        mig.AddField(
            model_name='problem',
            name='description_html',
            field=md.TextField(editable=False, default='?'),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='input_specification_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='output_specification_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='samples_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='explanations_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='notes_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        mig.AddField(
            model_name='problem',
            name='analysis_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        # Clarification.
        mig.AddField(
            model_name='clarification',
            name='format',
            field=md.CharField(
                max_length=40,
                default='textile',
                validators=[val.RegexValidator(r'^[^\s,]+$')],
            ),
            preserve_default=False,
        ),
        mig.AlterField(
            model_name='clarification',
            name='format',
            field=md.CharField(
                max_length=40,
                default='markdown',
                validators=[val.RegexValidator(r'^[^\s,]+$')],
            ),
        ),
        mig.AddField(
            model_name='clarification',
            name='answer_html',
            field=md.TextField(blank=True, editable=False),
            preserve_default=False,
        ),
        # Notification.
        mig.AddField(
            model_name='notification',
            name='format',
            field=md.CharField(
                max_length=40,
                default='textile',
                validators=[val.RegexValidator(r'^[^\s,]+$')],
            ),
            preserve_default=False,
        ),
        mig.AlterField(
            model_name='notification',
            name='format',
            field=md.CharField(
                max_length=40,
                default='markdown',
                validators=[val.RegexValidator(r'^[^\s,]+$')],
            ),
        ),
        mig.AddField(
            model_name='notification',
            name='description_html',
            field=md.TextField(editable=False, default='?'),
            preserve_default=False,
        ),
        # Migrate the existing data.
        mig.RunPython(populate_html_fields, mig.RunPython.noop),
        # PostgreSQL forbids ALTERing the schema after running an UPDATE in a single transaction.
    ]
